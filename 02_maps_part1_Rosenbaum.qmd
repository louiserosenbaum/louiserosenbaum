---
title: "Creating informative maps"
sidebar: false
format:
  html: default
editor_options: 
  chunk_output_type: console
---

Based on Section 3.2.3 from Modern Data Science with R.

You can download this .qmd file from [here](https://github.com/proback/264_fall_2024/blob/main/02_maps_part1.qmd).  Just hit the Download Raw File button.


```{r}
#| message: false
#| warning: false

# Initial packages required (we'll be adding more)
library(tidyverse)
library(mdsr)      # package associated with our MDSR book
```


### Opening example

Here is a simple choropleth map example from MDSR 

```{r}
#| message: false
#| warning: false

# CIACountries is a 236 x 8 data set with information on each country
#   taken from the CIA factbook - gdp, education, internet use, etc.
head(CIACountries)
CIACountries |>
  select(country, oil_prod) |>
  mutate(oil_prod_disc = cut(oil_prod, 
                             breaks = c(0, 1e3, 1e5, 1e6, 1e7, 1e8), 
                             labels = c(">1000", ">10,000", ">100,000", ">1 million", ">10 million"))) |>
  # we won't use mWorldMap often, but it's a good quick illustration
  mosaic::mWorldMap(key = "country") +
  geom_polygon(aes(fill = oil_prod_disc)) + 
  scale_fill_brewer("Oil Prod. (bbl/day)", na.value = "white") +
  theme(legend.position = "top")

```


### Choropleth Maps

When you have specific regions (e.g. countries, states, counties, census tracts,...) and a value associated with each region. 

A choropleth map will color the entire region according to the value. 
For example, let's consider state vaccination data from March 2021.

```{r}
#| message: false
#| warning: false

vaccine_data <- read_csv("https://proback.github.io/264_fall_2024/Data/vacc_Mar21.csv") 

vacc_mar13 <- vaccine_data |>
  filter(Date =="2021-03-13") |>
  select(State, Date, people_vaccinated_per100, share_doses_used, Governor)

vacc_mar13
```

The tricky part of choropleth maps is getting the shapes (polygons) that make up the regions. This is really a pretty complex set of lines for R to draw! 

Luckily, some maps are already created in R in the maps package.

```{r}
#| message: false
#| warning: false

library(maps)
us_states <- map_data("state")
head(us_states)
# Note that points in the same "group" are connected with a line

us_states |>
  ggplot(mapping = aes(x = long, y = lat,
                          group = group)) + 
  geom_polygon(fill = "olivedrab3", color = "black")
```

Other maps provided by the `maps` package include US counties, France, Italy, New Zealand, and two different views of the world. If you want maps of other countries or regions, you can often find them online.

Sometimes maps may be provided as shapefiles. To use these, you'll first need to read them into R and then turn them into tidy dataframes in order to use them with ggplot. See [here:](https://www.r-graph-gallery.com/168-load-a-shape-file-into-r.html).  More on shapefiles in Part 2.

Where the really cool stuff happens is when we join our data to the `us_states` dataframe.  Notice that the state name appears in the "region" column of `us_states`, and that the state name is in all small letters. In `vacc_mar13`, the state name appears in the State column and is in title case.  Thus, we have to be very careful when we join the state vaccine info to the state geography data.

Run this line by line to see what it does:

```{r}
vacc_mar13 <- vacc_mar13 |>
  mutate(State = str_to_lower(State))

vacc_mar13 |>
  right_join(us_states, by = c("State" = "region")) |>
  rename(region = State) |>
  ggplot(mapping = aes(x = long, y = lat,
                          group = group)) + 
  geom_polygon(aes(fill = people_vaccinated_per100), color = "black")
```

oops, New York appears to be a problem.

```{r}
vacc_mar13 |>
  anti_join(us_states, by = c("State" = "region"))

us_states |>
  anti_join(vacc_mar13, by = c("region" = "State")) |>
  count(region)
```

**[Pause to ponder:]** What did we learn by running `anti_join()` above?

>>By running anti_join(), we learned about the discrepancies or mismatches between the vaccination data and the geographical data, highlighting issues like naming conventions (ie. New York State vs. New York City) that must be addressed for accurate data analysis.f

Notice that the `us_states` map also includes only the contiguous 48 states. [This](https://r-spatial.org/r/2018/10/25/ggplot2-sf-3.html) gives an example of creating really beautiful map insets for Alaska and Hawaii.

```{r}
vacc_mar13 <- vacc_mar13 |>
  mutate(State = str_replace(State, " state", ""))

vacc_mar13 |>
  anti_join(us_states, by = c("State" = "region"))

us_states |>
  anti_join(vacc_mar13, by = c("region" = "State")) %>%
  count(region)
```

Better.


```{r}
#| message: false
#| warning: false

library(viridis) # for color schemes
vacc_mar13 |>
  right_join(us_states, by = c("State" = "region")) |>
  rename(region = State) |>
  ggplot(mapping = aes(x = long, y = lat,
                          group = group)) + 
  geom_polygon(aes(fill = people_vaccinated_per100), color = "black") + 
  labs(fill = "People Vaccinated\nper 100 pop.") +
  # This scales the longitude and latitude so that the shapes look correct.
  coord_map() + 
  # This theme can give you a really clean look!
  theme_void() +  
  # you can change the fill scale for different color schemes.
  scale_fill_viridis() 
```

**[Pause to ponder:]** Use autofill to play with different themes and scale_fills.

Note: Map projections are actually pretty complicated, especially if you're looking at large areas (e.g. world maps).  It's impossible to preserve both shape and area when projecting a sphere onto a flat surface, so that's why you sometimes see [such different maps of the world](https://futuremaps.com/blogs/news/top-10-world-map-projections)

There are a few different options in `coord_map()`. See the help menu, although this function is being phased out.

You can also use a categorical variable to color regions:

```{r}
vacc_mar13 |>
  right_join(us_states, by = c("State" = "region")) |>
  rename(region = State) |>
  ggplot(mapping = aes(x = long, y = lat,
                          group = group)) + 
  geom_polygon(aes(fill = Governor), color = "darkgrey", linewidth = 0.2) + 
  labs(fill = "Governor") +
  # This scales the longitude and latitude so that the shapes look correct.
  coord_map() + 
  # This theme can give you a really clean look!
  theme_void() +  
  # you can change the fill scale for different color schemes.
  scale_fill_manual(values = c("blue", "red")) 
```

### Multiple maps!  

**[Pause to ponder:]** are we bothered by the warning about many-to-many when you run the code below?

>>No, the many-to-many warning is expected due to aggregating vaccination data over time for each state, and it aligns with the analysis process.

```{r}
#| message: false
#| warning: false

library(lubridate)
weekly_vacc <- vaccine_data |>
  mutate(State = str_to_lower(State)) |>
  mutate(State = str_replace(State, " state", ""),
         week = week(Date)) |>
  group_by(week, State) |>
  summarize(date = first(Date),
            mean_daily_vacc = mean(daily_vaccinated/est_population*1000)) |>
  right_join(us_states, by =c("State" = "region")) |>
  rename(region = State)

weekly_vacc |>
  filter(week > 2, week < 11) |>
  ggplot(mapping = aes(x = long, y = lat,
                          group = group)) + 
  geom_polygon(aes(fill = mean_daily_vacc), color = "darkgrey", size = 0.1) + 
  labs(fill = "Weekly Average Daily Vaccinations per 1000") +
  coord_map() + 
  theme_void() + 
  scale_fill_viridis() + 
  facet_wrap(~date) + 
  theme(legend.position = "bottom") 
```


### Other cool state maps

#### statebin (square representation of states)

```{r}
#| message: false
#| warning: false

library(statebins) # may need to install

vacc_mar13 |>
  mutate(State = str_to_title(State)) |>
  statebins(state_col = "State",
            value_col = "people_vaccinated_per100") + 
  # one nice layout. You can customize with usual ggplot themes.
  theme_statebins() + 
  labs(fill = "People Vaccinated per 100")
```

**[Pause to ponder:]** Why might one use a map like above instead of our previous choropleth maps?

>>One might use a statebin map instead of choropleth maps to better highlight small states, particularly those on the East Coast, and to mitigate the visual bias caused by large states with small populations, ensuring a more equitable visual representation.

I used [this example](https://livefreeordichotomize.com/2021/04/07/nytimes-map-how-to/) to create the code above.  The original graph is located [here](https://www.nytimes.com/interactive/2021/04/06/us/variants-cases-spread.html)

### Interactive map with leaflet

```{r}
#| message: false
#| include: false

library(leaflet)
airbnb.df <- read_csv("https://proback.github.io/264_fall_2024/Data/airbnbData_full.csv") 
```

Leaflet is a powerful open-source JavaScript library for building interactive maps in HTML.  Although the commands are different, the architecture is very similar to ggplot2. However, instead of putting data-based layers on top of a static map, leaflet allows you to put data-based layers on top of an interactive map.  Because leaflet renders as HTML to allow interactivity, they are less effective as static pdfs.

With leaflet, you can have "pop-up" messages when you hover over points, and have a zoom-in and zoom-out option. 

Two main features:
   `addTiles()` = Add background map
   `setView()` =  Set where the map should originally zoom to
   
```{r}
# This part is for the pop-up messages.... some are weird or just "\n" for example, so this turns the weird stuff to blanks. We could also probably do this with str_ functions.
Encoding( x = airbnb.df$AboutListing ) <- "UTF-8"
airbnb.df$AboutListing <-
  iconv( x = airbnb.df$AboutListing
         , from = "UTF-8"
         , to = "UTF-8"
         , sub = "" )
head(airbnb.df)

# This part makes the map!
leaflet() |>
    addTiles() |>
    setView(lng = mean(airbnb.df$Long), lat = mean(airbnb.df$Lat), 
            zoom = 13) |> 
    addCircleMarkers(data = airbnb.df,
        lat = ~ Lat, 
        lng = ~ Long, 
        popup = ~ AboutListing, 
        radius = ~ S_Accomodates,  
        # These last options describe how the circles look
        weight = 2,
        color = "red", 
        fillColor = "yellow")
```


### On Your Own

The `states` dataset in the `poliscidata` package contains 135 variables on each of the 50 US states.  See [here](https://rdrr.io/cran/poliscidata/man/states.html) for more detail.

Your task is to create a two meaningful choropleth plots, one using a numeric variable and one using a categorical variable from `states`.  Write a sentence or two describing what you can learn from each plot.

Here's some R code to get you going:

```{r}
#| message: false
#| warning: false

library(poliscidata)   # may have to install first

# Be sure you know what the mutate statement below is doing!
state_data <- as_tibble(poliscidata::states) |>
  mutate(state_name = str_squish(str_to_lower(as.character(state)))) |>
  select(-state)
print(state_data, n = 5, width = Inf)
```

```{r}
# Join the map data with unemployment rates
unemployment_data <- left_join(us_states, state_data, by = c("region" = "state_name"))

# Create the choropleth plot for unemployment rates
ggplot(unemployment_data, aes(x = long, 
                              y = lat, 
                              group = group, 
                              fill = unemploy)) +
  geom_polygon(color = "white") +
  scale_fill_gradient(low = "yellow", 
                      high = "red", 
                      name = "Unemployment Rate (%)") +
  labs(title = "Unemployment Rate by State", x = "", y = "") +
  coord_fixed(1.3) +
  theme_void() +
  theme(legend.position = "right")
```

```{r}
# Join the map data with marijuana policy data
marijuana_policy_data <- left_join(us_states, state_data, by = c("region" = "state_name"))

# Create the choropleth plot for marijuana legalization policies
ggplot(marijuana_policy_data, aes(x = long, y = lat, group = group, fill = pot_policy)) +
  geom_polygon(color = "white") +
  scale_fill_manual(values = c("Medicinal" = "green", "Decrim" = "blue", "Not legal" = "grey", "Medicinal / Decrim." = "purple"), name = "Marijuana Policy") +
  labs(title = "Marijuana Legalization Policy by State", x = "", y = "") +
  coord_fixed(1.3) +
  theme_void() +
  theme(legend.position = "right")
```

